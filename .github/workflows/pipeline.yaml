# Action created by Juan Diego Sicacha

name: pipeline CI/CD

on:
  push:
    branches: [ "prueba2" ]
  pull_request:
    branches: [ "prueba2" ]

jobs:
  build-CICD:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t frontend-challenge2:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}" docker.io
          docker tag frontend-challenge2:latest ${{ secrets.DOCKER_USERNAME }}/frontend-challenge2:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-challenge2:latest

  deploy-Argo:
    runs-on: ubuntu-latest
    needs: build-CICD

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/

      - name: Start Minikube
        run: |
          minikube start --driver=docker

      - name: Set up kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/
          kubectl config use-context minikube

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd || echo "Namespace argocd already exists"
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Wait for ArgoCD to be ready
        run: |
          kubectl rollout status deployment/argocd-server -n argocd

      - name: Set up ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.5.4/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Get ArgoCD server URL
        id: argocd_url
        run: |
          export ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -z "$ARGOCD_SERVER" ]; then
            ARGOCD_SERVER="localhost:8080"  # Fallback in case loadBalancer not available
          fi
          echo "ARGOCD_SERVER=$ARGOCD_SERVER" >> $GITHUB_ENV

      - name: Get ArgoCD password
        id: argocd_password
        run: |
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o go-template='{{.data.password | base64decode}}')
          echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV

      - name: Log in to ArgoCD
        run: |
          argocd login ${{ env.ARGOCD_SERVER }} --username admin --password ${{ env.ARGOCD_PASSWORD }} --insecure

      - name: Sync application with ArgoCD
        run: |
          argocd app sync frontend-challenge-app --prune --revision master

      - name: Wait for deployment to complete
        run: |
          argocd app wait frontend-challenge-app --sync
